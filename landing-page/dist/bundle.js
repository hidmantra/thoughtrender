(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MakeOrdinal {
    constructor() {
        console.log('MakeOrdinal instantiated');
    }
    getOrdinal(originalNumber) {
        let ordinal = "th";
        let tenthPlaceNumber;
        let lastPlaceNumber;
        let stringOriginalNumber = originalNumber.toString();
        if (originalNumber > 9) {
            tenthPlaceNumber = this.getTenthPlace(originalNumber);
            if (tenthPlaceNumber > 9 && tenthPlaceNumber < 21) {
                return originalNumber.toString() + ordinal;
            }
            else {
                lastPlaceNumber = this.getLastPlace(tenthPlaceNumber);
            }
        }
        else {
            lastPlaceNumber = originalNumber;
        }
        switch (lastPlaceNumber) {
            case 1:
                {
                    ordinal = "st";
                    break;
                }
            case 2:
                {
                    ordinal = "nd";
                    break;
                }
            case 3:
                {
                    ordinal = "rd";
                    break;
                }
            default:
                {
                    ordinal = "th";
                    break;
                }
        }
        return originalNumber.toString() + ordinal;
    }
    /**
     *
     * @param myNumber
     */
    getTenthPlace(myNumber) {
        let stringNumber = myNumber.toString();
        let newNumber = Number(stringNumber.slice((stringNumber.length - 2), stringNumber.length));
        return newNumber;
    }
    getLastPlace(myNumber) {
        let newNumber;
        if (myNumber > 10) {
            let stringNumber = myNumber.toString();
            newNumber = Number(stringNumber.slice(1, 2));
        }
        else {
            newNumber = myNumber;
        }
        return newNumber;
    }
}
exports.MakeOrdinal = MakeOrdinal;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MakeOrdinal_1 = require("./MakeOrdinal");
class NiceDate {
    constructor() {
        this.makeOrdinal = new MakeOrdinal_1.MakeOrdinal();
        console.log('NiceDate made');
        this.d = new Date();
        this.months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    }
    getMonth() {
        this.month = this.months[this.d.getMonth()];
        return this.month;
    }
    ;
    getOrdinalDate() {
        let date = String(this.d.getDate());
        this.ordinalDate = this.makeOrdinal.getOrdinal(Number(date));
        return this.ordinalDate;
    }
}
exports.NiceDate = NiceDate;

},{"./MakeOrdinal":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//import { sayHello } from "./NiceDate";
const NiceDate_1 = require("./NiceDate");
// Html Elements
let multi = document.getElementById('multi');
let music = document.getElementById('music');
let holder = document.getElementById('holder');
let mainimage = document.getElementById('mainimage');
let thedate = document.getElementById('thedate');
let thebrowser = document.getElementById('thebrowser');
let thewidth = document.getElementById('thewidth');
let theheight = document.getElementById('theheight');
let niceDate = new NiceDate_1.NiceDate();
/**
 * Fires when everything is loaded and ready to GO!
 */
document.addEventListener("DOMContentLoaded", function (event) {
    console.log("loaded");
    setTimeout(function () {
        mainimage.style.opacity = '1';
        if (window.innerWidth > 481) {
            setTimeout(function () {
                console.log('timeoue met');
                multi.style.left = '20px';
                multi.style.opacity = '1';
                music.style.left = (holder.clientWidth - 220).toString() + "px";
                music.style.opacity = '1';
                thedate.style.opacity = '1';
                thedate.innerHTML = getTheDate();
                thewidth.style.opacity = '1';
                thewidth.innerHTML = "width: " + String(window.innerWidth);
                theheight.style.opacity = '1';
                theheight.innerHTML = "height: " + String(window.innerHeight);
                //thebrowser.style.opacity = '1';
                //thebrowser.innerHTML = getTheBrowser();
            }, 3000);
        }
    }, 100);
});
/**
 * Gets the date for display
 */
function getTheDate() {
    let today;
    var d = new Date();
    let theOrdinalDay = niceDate.getOrdinalDate();
    var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    today = months[d.getMonth()];
    today = today + " " + theOrdinalDay;
    console.log(today);
    return today;
}
;
/**
 * maybe make
 */
function getTheBrowser() {
    return;
}
window.addEventListener("mousemove", function (event) {
    //
});
window.onresize = function (event) {
    console.log("width = " + window.innerWidth + " height = " + window.innerHeight);
    if (window.innerWidth < 480) {
        multi.style.left = '0';
        music.style.left = '0';
    }
    else {
        multi.style.opacity = '1';
        music.style.opacity = '1';
        multi.style.left = '20px';
        music.style.left = (holder.clientWidth - 220).toString() + "px";
    }
};

},{"./NiceDate":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
