(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MakeOrdinal {
    constructor() {
        console.log('MakeOrdinal instantiated');
    }
    getOrdinal(originalNumber) {
        let ordinal = "th";
        let tenthPlaceNumber;
        let lastPlaceNumber;
        let stringOriginalNumber = originalNumber.toString();
        if (originalNumber > 9) {
            tenthPlaceNumber = this.getTenthPlace(originalNumber);
            if (tenthPlaceNumber > 9 && tenthPlaceNumber < 21) {
                return originalNumber.toString() + ordinal;
            }
            else {
                lastPlaceNumber = this.getLastPlace(tenthPlaceNumber);
            }
        }
        else {
            lastPlaceNumber = originalNumber;
        }
        switch (lastPlaceNumber) {
            case 1:
                {
                    ordinal = "st";
                    break;
                }
            case 2:
                {
                    ordinal = "nd";
                    break;
                }
            case 3:
                {
                    ordinal = "rd";
                    break;
                }
            default:
                {
                    ordinal = "th";
                    break;
                }
        }
        return originalNumber.toString() + ordinal;
    }
    getTenthPlace(myNumber) {
        let stringNumber = myNumber.toString();
        let newNumber = Number(stringNumber.slice((stringNumber.length - 2), stringNumber.length));
        return newNumber;
    }
    getLastPlace(myNumber) {
        let newNumber;
        if (myNumber > 10) {
            let stringNumber = myNumber.toString();
            newNumber = Number(stringNumber.slice(1, 2));
        }
        else {
            newNumber = myNumber;
        }
        return newNumber;
    }
}
exports.MakeOrdinal = MakeOrdinal;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MakeOrdinal_1 = require("./MakeOrdinal");
let multi = document.getElementById('multi');
let music = document.getElementById('music');
let holder = document.getElementById('holder');
let mainImage = document.getElementById('mainimage');
let theDate = document.getElementById('thedate');
let makeOrdinal = new MakeOrdinal_1.MakeOrdinal();
document.addEventListener("DOMContentLoaded", function (event) {
    console.log("loaded");
    setTimeout(function () {
        mainImage.style.opacity = '1';
        if (window.innerWidth > 481) {
            setTimeout(function () {
                console.log('timeoue met');
                multi.style.left = '20px';
                multi.style.opacity = '1';
                music.style.left = (holder.clientWidth - 220).toString() + "px";
                music.style.opacity = '1';
                theDate.style.opacity = '1';
                theDate.innerHTML = getTheDate();
            }, 3000);
        }
    }, 100);
});
function getTheDate() {
    let today;
    var d = new Date();
    let theDay = d.getDate();
    var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    today = months[d.getMonth()];
    today = today + theDay.toString();
    console.log(today);
    for (var _i = 0; _i < 130; _i++) {
        console.log(_i + " " + makeOrdinal.getOrdinal(_i));
    }
    //console.log(makeOrdinal.getOrdinal(3));
    return today;
}
;
window.addEventListener("mousemove", function (event) {
    //
});
window.onresize = function (event) {
    console.log("width = " + window.innerWidth + " height = " + window.innerHeight);
    if (window.innerWidth < 480) {
        multi.style.left = '0';
        music.style.left = '0';
    }
    else {
        multi.style.opacity = '1';
        music.style.opacity = '1';
        multi.style.left = '20px';
        music.style.left = (holder.clientWidth - 220).toString() + "px";
    }
};

},{"./MakeOrdinal":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
